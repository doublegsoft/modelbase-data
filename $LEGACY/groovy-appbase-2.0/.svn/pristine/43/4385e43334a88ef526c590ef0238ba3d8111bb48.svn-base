<#import '/$/modelbase.ftl' as modelbase>
import java.util.List
import java.util.ArrayList
import java.util.Map
import java.io.File

import groovy.lang.GroovyShell
import groovy.lang.Script

import org.springframework.context.ApplicationContext

import ${namespace}.${java.nameNamespace(app.name)}.model.repository.${java.nameType(entity.name)}Repository
import ${namespace}.${java.nameNamespace(app.name)}.model.value.*
import net.doublegsoft.appbase.JsonData
import net.doublegsoft.appbase.ObjectMap
import net.doublegsoft.appbase.SqlParams
import net.doublegsoft.appbase.dao.CommonDataAccess
import net.doublegsoft.appbase.service.CommonService
import net.doublegsoft.appbase.service.GroovyService
import net.doublegsoft.appbase.util.Strings

ObjectMap exclude(ApplicationContext spring, ObjectMap params) {
  CommonService commonService = spring.getBean("commonService")

  SqlParams sqlExclusion = new SqlParams().set(params)
  SqlParams sqlInclusion = new SqlParams().set(params)

  for (Map.Entry entry : params.entrySet()) {
    String key = entry.getKey()
    Object value = entry.getValue()
    if (key.indexOf('!') == 0) {
      String realKey = key.substring(1)
      sqlExclusion.set(realKey, value)
    } else if (key.indexOf('-') == 0) {
      String realKey = key.substring(1)
      sqlExclusion.remove(realKey)
      sqlInclusion.set(realKey, value)
    }
  }

  commonService.execute("${value.persistenceName}.update", sqlExclusion)
  commonService.execute("${value.persistenceName}.update", sqlInclusion)

  return params
}

ObjectMap handle(ApplicationContext spring, ObjectMap params) {
  return exclude(spring, params)
}

ApplicationContext spring = binding.getVariable("spring")
ObjectMap params = binding.getVariable("params")
GroovyService groovyService = spring.getBean(GroovyService.class)
CommonDataAccess commonDataAccess = spring.getBean("commonDataAccess")
GroovyShell shell = new GroovyShell()

String scriptRoot = groovyService.getRoot()
Script common = shell.parse(new File(scriptRoot + "/common.groovy"))

ObjectMap data 
try {
  commonDataAccess.beginTransaction()
  
  data = exclude(spring, params)
  data = common.transact(spring, shell, scriptRoot, params, data)
  
  commonDataAccess.commit()
} catch (Throwable cause) {
  commonDataAccess.rollback()
  return new JsonData().error(cause.getMessage())
} 

return new JsonData().set(data)