<#import '/$/modelbase.ftl' as modelbase>
<#assign attrId = modelbase.get_id_attributes(entity)[0]>
import java.util.List
import java.util.ArrayList
import java.util.Map
import java.io.File

import groovy.lang.GroovyShell
import groovy.lang.Script

import org.springframework.context.ApplicationContext

import ${namespace}.${java.nameNamespace(app.name)}.model.entity.${java.nameType(entity.name)}
import ${namespace}.${java.nameNamespace(app.name)}.model.assembler.${java.nameType(entity.name)}Assembler
import ${namespace}.${java.nameNamespace(app.name)}.model.repository.${java.nameType(entity.name)}Repository
import net.doublegsoft.appbase.JsonData
import net.doublegsoft.appbase.ObjectMap
import net.doublegsoft.appbase.SqlParams
import net.doublegsoft.appbase.util.Strings
import net.doublegsoft.appbase.service.RepositoryService
import net.doublegsoft.appbase.service.GroovyService

ObjectMap read(ApplicationContext spring, ObjectMap params) {
  def ${java.nameVariable(entity.name)}Repository = spring.getBean(${java.nameType(entity.name)}Repository.class)
  def repositoryService = spring.getBean(RepositoryService.class)

  if (Strings.isBlank(params.get("${modelbase.get_attribute_sql_name(attrId)}"))) {
    // throw new Exception("没有找到${modelbase.get_attribute_label(attrId)}，请联系管理员！")
    return new ObjectMap()
  }

  boolean readChildren = "true".equals(params.get("_read_children"))
  def obj = ${java.nameVariable(entity.name)}Repository.read${java.nameType(entity.name)}(params.get("${modelbase.get_attribute_sql_name(attrId)}"), readChildren)
  if (obj == null) return new ObjectMap()

  ObjectMap ${java.nameVariable(entity.name)} = ${java.nameType(entity.name)}Assembler.assembleObjectMap(obj)

  <#assign implicitReferences = modelbase.get_object_implicit_references(entity)>
  <#if implicitReferences?size != 0>
    <#list implicitReferences as implicitReferenceName, implicitReference>
      <#assign attrRefId = ''>
      <#assign attrRefType = ''>
      <#list implicitReference as value, attr>
        <#if value == 'type'>
          <#assign attrRefType = attr>
        <#elseif value == 'id'>
          <#assign attrRefId = attr>
        </#if>
      </#list>
  if (params.get("get${java.nameType(implicitReferenceName)}") == "true" && ${java.nameVariable(entity.name)}.get("${modelbase.get_attribute_sql_name(attrRefId)}") != null) {
    ${java.nameVariable(entity.name)}.set("${js.nameVariable(implicitReferenceName)}", repositoryService.readObject(${java.nameVariable(entity.name)}.get${java.nameType(attrRefId.name)}(), ${java.nameVariable(entity.name)}.get${java.nameType(attrRefType.name)}()));
  }
    </#list>
  </#if>
  return ${java.nameVariable(entity.name)}
}

ObjectMap handle(ApplicationContext spring, ObjectMap params) {
  return read(spring, params)
}

def spring = binding.getVariable("spring")
def params = binding.getVariable("params")
GroovyService groovyService = spring.getBean(GroovyService.class)
GroovyShell shell = new GroovyShell()

String scriptRoot = groovyService.getRoot()
Script common = shell.parse(new File(scriptRoot + "/common.groovy"))

def ret = new JsonData()

try {
  ObjectMap ${java.nameVariable(entity.name)} = read(spring, params)
  List<ObjectMap> items = new ArrayList()
  items.add(${java.nameVariable(entity.name)})
  
  items = common.hierarchize(spring, shell, scriptRoot, params, items)
  ret.set("data", items.get(0))
} catch (Throwable ex) {
  ret.error(ex.getMessage())
}

return ret
