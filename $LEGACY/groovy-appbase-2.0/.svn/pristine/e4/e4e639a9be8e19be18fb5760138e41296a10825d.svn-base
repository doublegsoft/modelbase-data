<#import "/$/modelbase.ftl" as modelbase>
<#assign attrId = modelbase.get_id_attributes(entity)[0]>
import java.util.List
import java.util.ArrayList
import java.util.Map
import java.io.File

import groovy.lang.GroovyShell
import groovy.lang.Script

import org.springframework.context.ApplicationContext

import ${namespace}.${java.nameNamespace(app.name)}.model.entity.${java.nameType(entity.name)}
import ${namespace}.${java.nameNamespace(app.name)}.model.assembler.${java.nameType(entity.name)}Assembler
import ${namespace}.${java.nameNamespace(app.name)}.model.repository.${java.nameType(entity.name)}Repository
import net.doublegsoft.appbase.dao.CommonDataAccess
import net.doublegsoft.appbase.ObjectMap
import net.doublegsoft.appbase.JsonData
import net.doublegsoft.appbase.SqlParams
import net.doublegsoft.appbase.util.Strings
import net.doublegsoft.appbase.service.GroovyService
import net.doublegsoft.appbase.service.CommonService

ObjectMap merge(ApplicationContext spring, ObjectMap params) {
  ${java.nameType(entity.name)} ${java.nameVariable(entity.name)} = ${java.nameType(entity.name)}Assembler.assemble${java.nameType(entity.name)}FromFrontend(params)
  ${java.nameType(entity.name)}Repository ${java.nameVariable(entity.name)}Repository = spring.getBean(${java.nameType(entity.name)}Repository.class)
  CommonService commonService = (CommonService) spring.getBean('commonService')

  // 根据唯一字段查询
  ObjectMap unique = null
  String uniqueFieldName = params.get('_unique_field')
  if (uniqueFieldName != null) {
    String uniqueFieldValue = params.get(uniqueFieldName)
    unique = commonService.single('${entity.persistenceName}.' + ${java.nameType(entity.name)}.getPersistenceName(uniqueFieldName) + '.find', new SqlParams().set(uniqueFieldName, uniqueFieldValue))
  }  

  ${java.nameType(entity.name)} existing = null

  if (unique != null) {
    params.set('${modelbase.get_attribute_sql_name(attrId)}', unique.get('${modelbase.get_attribute_sql_name(attrId)}'))
  } 

<#if attrId.type.custom>
  <#assign idEntity = model.findObjectByName(attrId.type.name)>
  <#assign idEntityIdAttr = modelbase.get_id_attributes(idEntity)[0]>
  if (params.get("${modelbase.get_attribute_sql_name(attrId)}") != null && !Strings.isBlank(params.get("${modelbase.get_attribute_sql_name(attrId)}").get("${modelbase.get_attribute_sql_name(idEntityIdAttr)}"))) {
    existing = ${java.nameVariable(entity.name)}Repository.read${java.nameType(entity.name)}(params.get("${modelbase.get_attribute_sql_name(attrId)}").get("${modelbase.get_attribute_sql_name(idEntityIdAttr)}"))
  }
<#else>
  if (!Strings.isBlank(params.get("${modelbase.get_attribute_sql_name(attrId)}"))) {
    existing = ${java.nameVariable(entity.name)}Repository.read${java.nameType(entity.name)}(params.get("${modelbase.get_attribute_sql_name(attrId)}"))
  }
</#if>

  if (existing == null)
    ${java.nameVariable(entity.name)}Repository.create${java.nameType(entity.name)}(${java.nameVariable(entity.name)})
  else {
    ${java.nameType(entity.name)}Assembler.assemble${java.nameType(entity.name)}From${java.nameType(entity.name)}(${java.nameVariable(entity.name)}, existing)
    ${java.nameVariable(entity.name)}Repository.update${java.nameType(entity.name)}(existing, false)
    ${java.nameVariable(entity.name)} = existing
  }
  ObjectMap ret = new ObjectMap()
  ret.set('${modelbase.get_attribute_sql_name(attrId)}', ${java.nameVariable(entity.name)}.get${java.nameType(attrId.name)}())
  return ret;
}

ObjectMap handle(ApplicationContext spring, ObjectMap params) {
  return merge(spring, params);
}

ApplicationContext spring = binding.getVariable("spring")
ObjectMap params = binding.getVariable("params")
GroovyService groovyService = spring.getBean(GroovyService.class)
CommonDataAccess commonDataAccess = spring.getBean("commonDataAccess")
GroovyShell shell = new GroovyShell()

String scriptRoot = groovyService.getRoot()
Script common = shell.parse(new File(scriptRoot + "/common.groovy"))

ObjectMap data = null
try {
  commonDataAccess.beginTransaction()
  data = merge(spring, params)
  data = common.transact(spring, shell, scriptRoot, params, data)
  commonDataAccess.commit()
} catch (Throwable ex) {
  commonDataAccess.rollback()
  return new JsonData().error(ex.getMessage())
}

// 返回对象
JsonData retVal = new JsonData()
retVal.set("data", data)
return retVal