<#import '/$/modelbase.ftl' as modelbase>
<#import '/$/appbase.ftl' as appbase>
<#if license??>
${java.license(license)}
</#if>
package <#if namespace??>${namespace}.</#if>${app.name}.defaults.repository;

import java.sql.Connection;
import java.util.List;
import java.util.Set;
import java.util.ArrayList;
import java.util.Set;
import java.util.HashSet;
import java.math.BigDecimal;
import java.io.Serializable;
import java.sql.Date;
import java.sql.Timestamp;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Repository;
import org.springframework.context.annotation.Lazy;

import net.doublegsoft.appbase.ddd.DomainException;
import net.doublegsoft.appbase.ObjectMap;
import net.doublegsoft.appbase.SqlParams;
import net.doublegsoft.appbase.service.CommonService;
import net.doublegsoft.appbase.service.RepositoryService;
import net.doublegsoft.appbase.service.ServiceException;
import net.doublegsoft.appbase.util.Strings;
import net.doublegsoft.appbase.util.IdGenerator;

<#list imports as imp>
import ${imp}.model.entity.*;
import ${imp}.model.assembler.*;
import ${imp}.model.validation.*;
import ${imp}.model.repository.*;
</#list>

import <#if namespace??>${namespace}.</#if>${app.name}.model.*;
<#if modelbase.has_entity_object(app.name, model)>
import <#if namespace??>${namespace}.</#if>${app.name}.model.entity.*;
import <#if namespace??>${namespace}.</#if>${app.name}.model.assembler.*;
import <#if namespace??>${namespace}.</#if>${app.name}.model.validation.*;
import <#if namespace??>${namespace}.</#if>${app.name}.model.repository.*;
</#if>
<#if modelbase.has_value_object(app.name, model)>
import <#if namespace??>${namespace}.</#if>${app.name}.model.value.*;
import <#if namespace??>${namespace}.</#if>${app.name}.model.assembler.*;
</#if>

<#-- 实体类名 -->
<#assign typename = java.nameType(entity.name)>
<#-- 实体变量名 -->
<#assign varname = java.nameVariable(entity.name)>
<#assign label = modelbase.get_object_label(entity)>
<#-- 名称的单数和复数形式 -->
<#attempt>
  <#assign singular = modelbase.get_attribute_labelled_option(entity, 'name', 'singular')>
  <#assign plural   = modelbase.get_attribute_labelled_option(entity, 'name', 'plural')>
<#recover>
  <#stop entity.name + '没有单复数的名称'>
</#attempt>

<#-- 实体访问库集合 -->
<#-- 实体的标识属性 -->
<#assign idAttrs  = modelbase.get_id_attributes(entity)>
<#-- 所有关联对象根据业务关系的分组 -->
<#assign groups   = modelbase.group_object_references(entity, model)>

<#-- 实体访问库集合 -->
<#assign anyRefObjs = groups.anyRefObjs>
<#-- 引用一个 -->
<#assign o2oRefAttrs = groups.o2oRefAttrs>
<#assign o2oRefObjs  = groups.o2oRefObjs>
<#-- 引用多个 -->
<#assign o2mRefAttrs = groups.o2mRefAttrs>
<#assign o2mRefObjs  = groups.o2mRefObjs>
<#assign o2mConjObjs = groups.o2mConjObjs>
/**
 * 实现【${label}】实体对象库的访问。
 *
 * @author <a href="mailto:guo.guo.gan@gmail.com">Christian Gann</a>
 *
 * @since 1.0
 */
@Repository("defaults.${app.name}.Default${typename}Repository")
public class Default${typename}Repository implements ${typename}Repository {

  /**
   * 通用数据访问服务。
   */
  @Autowired
  @Qualifier("commonService<#if databaseName??>4${java.nameType(databaseName)?lower_case}</#if>")
  protected CommonService commonService;

  /**
   * 通用对象访问服务。
   */
  @Autowired
  @Qualifier("repositoryService<#if databaseName??>4${java.nameType(databaseName)?lower_case}</#if>")
  protected RepositoryService repositoryService;

<#assign existings = {}>
<#list anyRefObjs?values as refObj>
  <#if refObj.isLabelled('entity')>
    <#if existings[refObj.name]??><#continue></#if>
    <#assign existings = existings + {refObj.name: refObj}>
  <#-- only entities have repositories -->
  /**
   * 【${modelbase.get_object_label(refObj)}】库访问对象。
   */
  @Autowired
  @Lazy
  protected ${java.nameType(refObj.name)}Repository ${java.nameVariable(refObj.name)}Repository;

  </#if>
</#list>
<#list o2mRefObjs as o2mRefObj>
  <#list o2mRefObj.attributes as attr>
    <#if !attr.type.custom><#continue></#if>
    <#if attr.type.name == entity.name><#continue></#if>
    <#assign o2mRefObjRefObj = model.findObjectByName(attr.type.name)>
    <#if !o2mRefObjRefObj.isLabelled('entity')><#continue></#if>
    <#if existings[o2mRefObjRefObj.name]??><#continue></#if>
    <#assign existings = existings + {o2mRefObjRefObj.name: o2mRefObjRefObj}>
  <#-- only entities have repositories -->
  /**
   * 【${modelbase.get_object_label(o2mRefObjRefObj)}】库访问对象。
   */
  @Autowired
  @Lazy
  protected ${java.nameType(o2mRefObjRefObj.name)}Repository ${java.nameVariable(o2mRefObjRefObj.name)}Repository;

  </#list>
</#list>
<#--#################################################################################################################-->
<#-- 创建【CREATE】操作                                                                                                -->
<#--#################################################################################################################-->
  /**
   * 创建【${label}】实体对象。
   *
   * @param ${varname}
   *        待创建的【${label}】实体对象
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  @Override
  public void create${typename}(${typename} ${varname}) throws DomainException {
<#-- SPEC: 必填项的服务器端校验 -->
    // validate the ${java.nameVariable(entity.name)}
    ${typename}Validation validation = new ${typename}Validation(commonService);
    String validationErrors = validation.validate(${varname});
    if (!Strings.isBlank(validationErrors)) {
      throw new DomainException(validationErrors);
    }
<#list idAttrs as idAttr>
    ${modelbase.type_attribute(idAttr)} ${java.nameVariable(idAttr.name)} = ${java.nameVariable(entity.name)}.get${java.nameType(idAttr.name)}();
</#list>
<#-- SPEC: 创建一对一【任意对象】，扩展对象 -->
<#list o2oRefAttrs as o2oRefAttr>
  <#assign o2oRefObj              = o2oRefObjs[o2oRefAttr?index]>
  <#assign o2oRefObjIdAttrs       = modelbase.get_id_attributes(o2oRefObj)>
  <#assign o2oRefAttrDirectTarget = o2oRefAttr.directRelationship.targetAttribute>
  <#if o2oRefObj.name == modelbase.get_object_extension(entity)>
    if (${varname}.get${java.nameType(o2oRefAttr.name)}() != null && ${varname}.get${java.nameType(o2oRefAttr.name)}().get${java.nameType(o2oRefAttrDirectTarget.name)}() != null) {
    <#-- 扩展：保证主键一致 -->
    <#if !o2oRefAttr.identifiable>
      ${java.nameType(o2oRefObj.name)} ${java.nameVariable(o2oRefAttr.name)} = ${varname}.get${java.nameType(o2oRefAttr.name)}();
      ${java.nameVariable(o2oRefAttr.name)}.set${java.nameType(o2oRefAttrDirectTarget.name)}(${varname}.get${java.nameType(o2oRefAttr.name)}());
    <#else>
      ${java.nameVariable(o2oRefAttr.name)}.set${java.nameType(o2oRefAttrDirectTarget.name)}(${varname}.get${java.nameType(o2oRefAttr.name)}().get${java.nameType(o2oRefObjIdAttrs[0].name)}());
    </#if>
      ${java.nameVariable(o2oRefObj.name)}Repository.update${java.nameType(o2oRefObj.name)}(${java.nameVariable(o2oRefAttr.name)});
    } else {
    <#list idAttrs as idAttr>
      ${java.nameVariable(idAttr.name)} = new ${modelbase.type_attribute(idAttr)}();
    </#list>
      // ${java.nameVariable(o2oRefObj.name)}Repository.setIdentifiableAttributes();
      ${java.nameVariable(o2oRefObj.name)}Repository.create${java.nameType(o2oRefObj.name)}(${java.nameVariable(idAttrs[0].name)});
      ${varname}.set${java.nameType(o2oRefAttr.name)}(${java.nameVariable(idAttrs[0].name)});
    }
  <#else>
    <#-- 选择 -->
  </#if>    
</#list>
    // 如果标识为空则赋值
    setIdentifiableAttributes(${java.nameVariable(entity.name)});
    // 对象标识属性
<#list idAttrs as idAttr>
    ${java.nameVariable(idAttr.name)} = ${java.nameVariable(entity.name)}.get${java.nameType(idAttr.name)}();
</#list>
    try {
      // 创建【${label}】主实体
      commonService.execute("${entity.persistenceName?lower_case}.create", ${java.nameType(entity.name)}Assembler.assembleSqlParams(${java.nameVariable(entity.name)}));
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
<#-- 本身直接引用的单个自定义类型的属性，则可以直接创建 -->
<#list entity.attributes as attr>
  <#if !attr.type.custom || attr.isLabelled('persistence')><#continue></#if>
  <#assign directObj = model.findObjectByName(attr.type.name)>
  <#assign directObjIdAttr = modelbase.get_id_attributes(directObj)[0]>
  <#if !directObj.isLabelled('entity')><#continue></#if>
    if (${java.nameVariable(entity.name)}.get${java.nameType(attr.name)}() != null) {
      ${java.nameVariable(entity.name)}.get${java.nameType(attr.name)}().set${java.nameType(directObjIdAttr.name)}(${java.nameVariable(entity.name)}.get${java.nameType(idAttrs[0].name)}());
      ${java.nameVariable(directObj.name)}Repository.create${java.nameType(directObj.name)}(${java.nameVariable(entity.name)}.get${java.nameType(attr.name)}());
    }
</#list>
<#-- SPEC: 创建一对多【任意对象】 -->
<#list o2mRefAttrs as o2mRefAttr>
  <#assign o2mRefObj = o2mRefObjs[o2mRefAttr?index]>
  <#assign o2mConjObj = o2mConjObjs[o2mRefAttr?index]>
  <#if o2mConjObj != ''>
    // 建立关联【${modelbase.get_attribute_label(o2mRefAttr)}】任意对象多对多的关系
    List<${java.nameType(o2mRefObj.name)}> ${java.nameVariable(o2mRefAttr.name)} = ${varname}.get${java.nameType(o2mRefAttr.name)}();
    add${java.nameType(o2mRefAttr.name)}(${varname}, ${java.nameVariable(o2mRefAttr.name)});
    <#continue>
  </#if>
  <#-- 查询在o2mRefObj对象中引用当前实体的属性 -->
  <#assign o2mRefObjRefAttr  = modelbase.get_o2o_attribute(o2mRefObj, entity.name)>
  <#-- o2mRefObj对象的单数名称 -->
  <#assign o2mRefObjSingular = modelbase.get_object_singular(o2mRefObj)>
  <#if o2mRefObj.type.name == entity.type.name>
    <#assign o2mRefObjSingular = 'child'>
  </#if>
  <#if o2mRefObj.isLabelled('value')>
    // 创建【${modelbase.get_attribute_label(o2mRefAttr)}】一对多值域对象
    List<${java.nameType(o2mRefObj.name)}> ${java.nameVariable(o2mRefAttr.name)} = ${varname}.get${java.nameType(o2mRefAttr.name)}();
    for (${java.nameType(o2mRefObj.name)} ${java.nameVariable(o2mRefObjSingular)} : ${java.nameVariable(o2mRefAttr.name)}) {
      ${java.nameVariable(o2mRefObjSingular)}.set${java.nameType(o2mRefObjRefAttr.name)}(${varname});
    }
    add${java.nameType(o2mRefAttr.name)}(${varname}, ${java.nameVariable(o2mRefAttr.name)});
  <#elseif o2mRefObj.isLabelled('entity')>
    // 创建【${modelbase.get_attribute_label(o2mRefAttr)}】一对多实体对象
    List<${java.nameType(o2mRefObj.name)}> ${java.nameVariable(o2mRefAttr.name)} = ${varname}.get${java.nameType(o2mRefAttr.name)}();
    for (${java.nameType(o2mRefObj.name)} ${java.nameVariable(o2mRefObjSingular)} : ${java.nameVariable(o2mRefAttr.name)}) {
      ${java.nameVariable(o2mRefObjSingular)}.set${java.nameType(o2mRefObjRefAttr.name)}(${varname});
      ${java.nameVariable(o2mRefObj.name)}Repository.create${java.nameType(o2mRefObj.name)}(${java.nameVariable(o2mRefObjSingular)});
    }
  </#if>
</#list>
  }

<#--#################################################################################################################-->
<#-- 读取【READ】操作                                                                                                  -->
<#--#################################################################################################################-->
  /**
   * 读取一个【${label}】实体对象。
   *
<#list idAttrs as attr>
   * @param ${java.nameVariable(attr.name)}
   *        【${modelbase.get_attribute_label(attr)}】属性
   *
</#list>
   * @param withChildren
   *        是否加载子对象集合，{@code true}加载，{@code false}不加载
   *
   * @return 如果找到则返回找到的对象，否则返回空
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  @Override
  public ${java.nameType(entity.name)} read${java.nameType(entity.name)}(${modelbase.get_attributes_as_parameters(idAttrs)}, boolean withChildren) throws DomainException {
    SqlParams params = new SqlParams();
<#list idAttrs as attr>
    params.set("${modelbase.get_attribute_sql_name(attr)}", ${java.nameVariable(attr.name)});
</#list>
    ObjectMap found = null;
    try {
      found = commonService.single("${entity.persistenceName?lower_case}.find", params);
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
    if (found == null) {
      return null;
    }
    ${java.nameType(entity.name)} retVal = ${java.nameType(entity.name)}Assembler.assemble${java.nameType(entity.name)}(found);
<#-- SPEC: 获取一般实体对象 -->
<#list o2oRefAttrs as o2oRefAttr>
  <#assign o2oRefObj = o2oRefObjs[o2oRefAttr?index]>
  <#assign o2oRefObjIdAttrs = modelbase.get_id_attributes(o2oRefObj)>
  <#if !o2oRefAttr.persistenceName??>
    <#continue>
  </#if>
  <#assign o2oRefAttrTagetAttr = o2oRefAttr.directRelationship.targetAttribute>
    // 获取【${modelbase.get_attribute_label(o2oRefAttr)}】属性的对象
    ${modelbase.type_attribute_primitive(o2oRefAttrTagetAttr)} ${modelbase.get_attribute_sql_name(o2oRefAttr)} = found.get("${modelbase.get_attribute_sql_name(o2oRefAttr)}");
    if (${modelbase.get_attribute_sql_name(o2oRefAttr)} != null) {
  <#if o2oRefObj.isLabelled('entity')>
      ${java.nameType(o2oRefObj.name)} ${java.nameVariable(o2oRefObj.name)}Ref = ${java.nameVariable(o2oRefObj.name)}Repository.read${java.nameType(o2oRefObj.name)}(${modelbase.get_attribute_sql_name(o2oRefAttr)}, false);
  <#elseif o2oRefObj.isLabelled('value')>
      ${java.nameType(o2oRefObj.name)} ${java.nameVariable(o2oRefObj.name)}Ref = read${java.nameType(o2oRefAttr.name)}(${modelbase.get_attribute_sql_name(o2oRefAttr)}, false);
  </#if>
      retVal.set${java.nameType(o2oRefAttr.name)}(${java.nameVariable(o2oRefObj.name)}Ref);
    }
</#list>
    if (!withChildren) {
      return retVal;
    }
<#-- SPEC: 获取多对多实体对象 -->
<#list o2mRefAttrs as o2mRefAttr>
  <#assign o2mRefObj = o2mRefObjs[o2mRefAttr?index]>
  <#assign o2mConjObj = o2mConjObjs[o2mRefAttr?index]>
  <#if o2mConjObj != ''>
    <#list o2mConjObj.attributes as o2mConjObjAttr>
      <#if o2mConjObjAttr.type.custom && o2mConjObjAttr.type.name != entity.name>
    retVal.get${java.nameType(o2mRefAttr.name)}().addAll(find${java.nameType(o2mRefAttr.name)}By${java.nameType(entity.name)}(retVal));
      </#if>
    </#list>
  <#else>
    <#assign o2mRefObjRefAttr = modelbase.get_o2o_attribute(o2mRefObj, entity.name)>
    // 获取【${modelbase.get_attribute_label(o2mRefAttr)}】属性
    <#if o2mRefObj.isLabelled('value')>
    List<${java.nameType(o2mRefObj.name)}> ${java.nameVariable(o2mRefAttr.name)} = find${java.nameType(o2mRefAttr.name)}(retVal);
    <#elseif o2mRefObj.isLabelled('entity')>
    List<${java.nameType(o2mRefObj.name)}> ${java.nameVariable(o2mRefAttr.name)} = ${java.nameVariable(o2mRefObj.name)}Repository.find${java.nameType(o2mRefObj.plural)}By${java.nameType(o2mRefObjRefAttr.name)}(retVal);
    </#if>
    retVal.get${java.nameType(o2mRefAttr.name)}().addAll(${java.nameVariable(o2mRefAttr.name)});
  </#if>
</#list>
    return retVal;
  }

<#--#################################################################################################################-->
<#-- 更新【UPDATE】操作                                                                                                -->
<#--#################################################################################################################-->
  /**
   * 更新一个【${label}】实体对象.
   *
   * @param ${varname}
   *        待更新的实体对象
   *
   * @param updateChildren
   *        是否更新子对象集合，{@code true}更新，{@code false}不更新
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  @Override
  public void update${typename}(${typename} ${varname}, Set<String> updateChildren) throws DomainException {
    SqlParams params = ${typename}Assembler.assembleSqlParams(${varname});
    try {
<#if entity.getLabelledOptions('persistence')['revision']??>
      commonService.execute("${entity.persistenceName?lower_case}.revision", params);
</#if>
      commonService.execute("${entity.persistenceName?lower_case}.update", params);
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
    if (updateChildren == null || updateChildren.isEmpty()) {
      return;
    }
<#-- SPEC: MASTER 引用 -->
<#list entity.attributes as attr>
  <#if !attr.type.custom><#continue></#if>
  <#assign refObj = model.findObjectByName(attr.type.name)>
  <#assign master = refObj.getLabelledOptions('entity')['master']!>
  <#if master == entity.name>
    <#assign refObjIdAttr = modelbase.get_id_attributes(refObj)[0]>
    if (${varname}.get${java.nameType(attr.name)}() != null && updateChildren.contains("update${js.nameType(attr.name)}")) {
      if (${varname}.get${java.nameType(attr.name)}().get${java.nameType(refObjIdAttr.name)}() == null) {
        ${varname}.get${java.nameType(attr.name)}().set${java.nameType(refObjIdAttr.name)}(${varname}.get${java.nameType(idAttrs[0].name)}());
        ${java.nameVariable(refObj.name)}Repository.create${java.nameType(refObj.name)}(${varname}.get${java.nameType(attr.name)}());
      } else {
        ${java.nameVariable(refObj.name)}Repository.update${java.nameType(refObj.name)}(${varname}.get${java.nameType(attr.name)}(), true);
      }
    }
  </#if>
</#list>
<#-- SPEC: 创建一对一【任意对象】 -->
<#-- FIXME: 一定要解决多主键一对一的问题 -->
<#list o2oRefAttrs as o2oRefAttr>
  <#assign o2oRefObj              = o2oRefObjs[o2oRefAttr?index]>
  <#assign o2oRefObjIdAttrs       = modelbase.get_id_attributes(o2oRefObj)>
  <#assign o2oRefAttrDirectTarget = o2oRefAttr.directRelationship.targetAttribute>
  <#if o2oRefObj.name == modelbase.get_object_extension(entity)>
    <#-- 扩展：利用主键一致性 -->
    ${java.nameType(o2oRefObj.name)} ${java.nameVariable(o2oRefAttr.name)} = ${varname}.get${java.nameType(o2oRefAttr.name)}();
    <#-- 扩展：保证主键一致 -->
    <#if !o2oRefAttr.identifiable>
    ${java.nameType(o2oRefObj.name)} ${java.nameVariable(o2oRefAttr.name)} = ${varname}.get${java.nameType(o2oRefAttr.name)}();
    ${java.nameVariable(o2oRefAttr.name)}.set${java.nameType(o2oRefAttrDirectTarget.name)}(${varname}.get${java.nameType(o2oRefAttr.name)}());
    <#else>
    ${java.nameVariable(o2oRefAttr.name)}.set${java.nameType(o2oRefAttrDirectTarget.name)}(${varname}.get${java.nameType(o2oRefAttr.name)}().get${java.nameType(o2oRefObjIdAttrs[0].name)}());
    </#if>
    ${java.nameVariable(o2oRefObj.name)}Repository.update${java.nameType(o2oRefObj.name)}(${java.nameVariable(o2oRefAttr.name)});
  <#else>
    <#-- 选择 -->
  </#if>    
</#list>
<#-- SPEC: 创建一对多【任意对象】 -->
<#list o2mRefAttrs as o2mRefAttr>
  <#assign o2mRefObj = o2mRefObjs[o2mRefAttr?index]>
  <#assign o2mConjObj = o2mConjObjs[o2mRefAttr?index]>
  <#if o2mConjObj != ''>
    if (updateChildren.contains("update${js.nameType(o2mRefAttr.name)}")) {
      // 重新建立关联【${modelbase.get_attribute_label(o2mRefAttr)}】任意对象多对多的关系
      List<${java.nameType(o2mRefObj.name)}> ${java.nameVariable(o2mRefAttr.name)} = ${varname}.get${java.nameType(o2mRefAttr.name)}();
      remove${java.nameType(o2mRefAttr.name)}(${varname});
      add${java.nameType(o2mRefAttr.name)}(${varname}, ${java.nameVariable(o2mRefAttr.name)});
    }
    <#continue>
  </#if>
  <#-- 查询在o2mRefObj对象中引用当前实体的属性 -->
  <#assign o2mRefObjRefAttr  = modelbase.get_o2o_attribute(o2mRefObj, entity.name)>
  <#assign o2mRefObjIdAttrs  = modelbase.get_id_attributes(o2mRefObj)>
  <#-- o2mRefObj对象的单数名称 -->
  <#assign o2mRefObjSingular = modelbase.get_object_singular(o2mRefObj)>
  <#if o2mRefObj.type.name == entity.type.name>
    <#assign o2mRefObjSingular = 'child'>
  </#if>
  <#if o2mRefObj.isLabelled('value')>
    if (updateChildren.contains("update${js.nameType(o2mRefAttr.name)}")) {
      // 更新【${modelbase.get_attribute_label(o2mRefAttr)}】一对多值域对象
      List<${java.nameType(o2mRefObj.name)}> inserting${java.nameType(o2mRefAttr.name)} = new ArrayList<>();
      List<${java.nameType(o2mRefObj.name)}> existing${java.nameType(o2mRefAttr.name)} = find${java.nameType(o2mRefAttr.name)}(${varname});
      List<${java.nameType(o2mRefObj.name)}> ${java.nameVariable(o2mRefAttr.name)} = ${varname}.get${java.nameType(o2mRefAttr.name)}();
      if (${java.nameVariable(o2mRefAttr.name)} != null) {
        ${java.nameVariable(o2mRefAttr.name)} = new ArrayList<>();
      }
      // 处理已有【${modelbase.get_attribute_label(o2mRefAttr)}】属性
      remove${java.nameType(o2mRefAttr.name)}(${varname});
      add${java.nameType(o2mRefAttr.name)}(${varname}, ${java.nameVariable(o2mRefAttr.name)});
    }
  <#elseif o2mRefObj.isLabelled('entity') && o2mRefObj.name != entity.name>
    if (updateChildren.contains("update${js.nameType(o2mRefAttr.name)}")) {
      // 更新【${modelbase.get_attribute_label(o2mRefAttr)}】一对多实体对象，树结构不用更新
      List<${java.nameType(o2mRefObj.name)}> existing${java.nameType(o2mRefAttr.name)} = ${java.nameVariable(o2mRefObj.name)}Repository.find${java.nameType(modelbase.get_object_plural(o2mRefObj))}By${java.nameType(o2mRefObjRefAttr.name)}(${varname});
      List<${java.nameType(o2mRefObj.name)}> ${java.nameVariable(o2mRefAttr.name)} = ${varname}.get${java.nameType(o2mRefAttr.name)}();
      if (${java.nameVariable(o2mRefAttr.name)} != null) {
        ${java.nameVariable(o2mRefAttr.name)} = new ArrayList<>();
      }
      // 处理已有【${modelbase.get_attribute_label(o2mRefAttr)}】属性
      for (${java.nameType(o2mRefObj.name)} existing${java.nameType(o2mRefObjSingular)} : existing${java.nameType(o2mRefAttr.name)}) {
        boolean existing = false;
        for (${java.nameType(o2mRefObj.name)} ${java.nameVariable(o2mRefObjSingular)} : ${java.nameVariable(o2mRefAttr.name)}) {
          if (existing${java.nameType(o2mRefObjSingular)}.equals(${java.nameVariable(o2mRefObjSingular)})) {
            existing = true;
            break;
          }
        }
        if (!existing) {
          ${java.nameVariable(o2mRefObj.name)}Repository.delete${java.nameType(o2mRefObj.name)}(existing${java.nameType(o2mRefObjSingular)}.get${java.nameType(o2mRefObjIdAttrs[0].name)}());
        }
      }
      // 处理新增【${modelbase.get_attribute_label(o2mRefAttr)}】属性
      for (${java.nameType(o2mRefObj.name)} ${java.nameVariable(o2mRefObjSingular)} : ${java.nameVariable(o2mRefAttr.name)}) {
        if (!${java.nameVariable(o2mRefObjSingular)}.hasNullId()) {
          ${java.nameVariable(o2mRefObjSingular)}.set${java.nameType(o2mRefObjRefAttr.name)}(${varname});
          ${java.nameVariable(o2mRefObj.name)}Repository.create${java.nameType(o2mRefObj.name)}(${java.nameVariable(o2mRefObjSingular)});
        } else {
          ${java.nameVariable(o2mRefObj.name)}Repository.update${java.nameType(o2mRefObj.name)}(${java.nameVariable(o2mRefObjSingular)});
        }
      }
    } // update${js.nameType(o2mRefAttr.name)}
  </#if>
</#list>
  }

<#--#################################################################################################################-->
<#-- 物理删除【DELETE】操作                                                                                                -->
<#--#################################################################################################################-->
  /**
   * 删除一个【${label}】实体对象.
   *
<#list idAttrs as attr>
   * @param ${java.nameVariable(attr.name)}
   *        【${modelbase.get_attribute_label(attr)}】属性
   *
</#list>
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  @Override
  public void delete${typename}(<@appbase.print_attributes_as_parameters attrs=idAttrs/>) throws DomainException {
    SqlParams params = new SqlParams();
    try {
      // 删除主实体
<#list idAttrs as idAttr>
  <#if idAttr.type.custom>
      params.set("${modelbase.get_attribute_sql_name(idAttr)}", ${java.nameVariable(idAttr.name)}.get${java.nameType(idAttr.directRelationship.targetAttribute.name)}());
  <#else>    
      params.set("${modelbase.get_attribute_sql_name(idAttr)}", ${java.nameVariable(idAttr.name)});
  </#if>
</#list>
      commonService.execute("${entity.persistenceName?lower_case}.delete", params);
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
<#-- SPEC: 删除一对多【值对象】 -->
<#list o2oRefAttrs as o2oRefAttr>
  <#assign o2oRefObj = o2oRefObjs[o2oRefAttr?index]>
  <#assign o2oRefObjIdAttrs = modelbase.get_id_attributes(o2oRefObj)>
  <#if o2oRefObj.name == modelbase.get_object_extension(entity)>
    ${java.nameVariable(o2oRefObj.name)}Repository.delete${java.nameType(o2oRefObj.name)}(${java.nameVariable(o2oRefAttr.name)}.get${java.nameType(o2oRefObjIdAttrs[0].name)}());
  </#if>
</#list>
<#list o2mRefAttrs as o2mRefAttr>
  <#assign o2mRefObj = o2mRefObjs[o2mRefAttr?index]>
  <#assign o2mConjObj = o2mConjObjs[o2mRefAttr?index]>
  <#assign o2mRefObjIdAttrs = modelbase.get_id_attributes(o2mRefObj)>
  <#assign o2mRefObjSingular = modelbase.get_object_singular(o2mRefObj)>
  <#if o2mConjObj == ''>
    <#-- 不存在关联表的实体一对多引用，不删除该引用的一对多实体 -->
    <#continue>
  </#if>
    // 删除多对多关联实体
    params.clear();
    try {
      params.set("${modelbase.get_attribute_sql_name(o2mRefAttr.directRelationship.targetAttribute)}", ${java.nameVariable(idAttrs[0].name)});
      commonService.execute("${o2mConjObj.persistenceName}.delete", params);
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
</#list>
  }

<#--#################################################################################################################-->
<#-- 查询【FIND】操作                                                                                                -->
<#--#################################################################################################################-->
  /**
   * 查询满足条件的【${label}】实体对象集合.
   *
   * @param params
   *        查询条件，对应具体的SQL语句
   *
   * @param children
   *        是否同时查询出子对象
   *
   * @return 满足条件的【${label!''}】实体对象集合
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  @Override
  public List<${typename}> find${java.nameType(entity.plural)}By(ObjectMap params, boolean children) throws DomainException {
    List<${typename}> retVal = new ArrayList<>();
    try {
      List<ObjectMap> data = commonService.all("${entity.persistenceName?lower_case}.find", new SqlParams().set(params));
      for (ObjectMap row : data) {
        retVal.add(${java.nameType(entity.name)}Assembler.assemble${java.nameType(entity.name)}(row));
      }
    } catch (ServiceException ex) {
      throw new DomainException("find${java.nameType(entity.plural)}By", ex);
    }
    return retVal;
  }

  @Override
  public List<ObjectMap> findObjectMapsBy(ObjectMap params) throws DomainException {
    try {
      return commonService.all("${entity.persistenceName?lower_case}.find", new SqlParams().set(params));
    } catch (ServiceException ex) {
      throw new DomainException("find${java.nameType(entity.plural)}By", ex);
    }
  }

  <#--#################################################################################################################-->
  <#-- 创建【聚合】操作                                                                                                  -->
  <#--#################################################################################################################-->
  @Override
  public List<ObjectMap> count${java.nameType(entity.plural)}(ObjectMap params) throws DomainException {
    List<String> grouping${java.nameType(entity.name)}Attributes = params.get("grouping${java.nameType(entity.name)}Attributes");
    for (String groupingAttributeName : grouping${java.nameType(entity.name)}Attributes) {
      ObjectMap groupingField = new ObjectMap();
      groupingField.set("persistenceName", ${java.nameType(entity.name)}.getPersistenceName(groupingAttributeName));
      groupingField.set("attributeName", groupingAttributeName);
      params.add("groupingFields", groupingField);
    }
    
    try {
      return commonService.all("${entity.persistenceName?lower_case}.count", new SqlParams().set(params));
    } catch (ServiceException ex) {
      throw new DomainException("count${java.nameType(entity.plural)}By", ex);
    }
  }

  @Override
  public List<ObjectMap> sum${java.nameType(entity.plural)}(ObjectMap params) throws DomainException {
    List<String> grouping${java.nameType(entity.name)}Attributes = (List<String>) params.get("grouping${java.nameType(entity.name)}Attributes");
    List<String> summing${java.nameType(entity.name)}Attributes = (List<String>) params.get("summing${java.nameType(entity.name)}Attributes");
    for (String groupingAttributeName : grouping${java.nameType(entity.name)}Attributes) {
      ObjectMap groupingField = new ObjectMap();
      groupingField.set("persistenceName", ${java.nameType(entity.name)}.getPersistenceName(groupingAttributeName));
      groupingField.set("attributeName", groupingAttributeName);
      params.add("groupingFields", groupingField);
    }

    for (String summingAttributeName : summing${java.nameType(entity.name)}Attributes) {
      ObjectMap summingField = new ObjectMap();
      summingField.set("persistenceName", ${java.nameType(entity.name)}.getPersistenceName(summingAttributeName));
      summingField.set("attributeName", summingAttributeName);
      params.add("summingFields", summingField);
    }
    
    try {
      return commonService.all("${entity.persistenceName?lower_case}.sum", new SqlParams().set(params));
    } catch (ServiceException ex) {
      throw new DomainException("sum${java.nameType(entity.name)}", ex);
    }
  }
  <#-- 多对多关联的聚合函数 -->
  <#list entity.attributes as attr>
    <#if !attr.type.collection><#continue></#if>
    <#assign conjObjName = attr.getLabelledOptions('persistence')['conjunction']!>
    <#if conjObjName != ''>
      <#assign conjObj = model.findObjectByName(attr.getLabelledOptions('persistence')['conjunction'])>
    </#if>
    <#assign refObj = model.findObjectByName(attr.type.componentType.name)>
    <#if refObj.name == entity.name><#continue></#if>
  @Override
  public List<ObjectMap> count${java.nameType(refObj.plural)}(ObjectMap params) throws DomainException {
    List<String> grouping${java.nameType(refObj.name)}Attributes = params.get("grouping${java.nameType(refObj.name)}Attributes");
    for (String groupingAttributeName : grouping${java.nameType(refObj.name)}Attributes) {
      ObjectMap groupingField = new ObjectMap();
      groupingField.set("persistenceName", ${java.nameType(refObj.name)}.getPersistenceName(groupingAttributeName));
      groupingField.set("attributeName", groupingAttributeName);
      params.add("groupingFields", groupingField);
    }
    
    try {
    <#if conjObjName != ''>
      return commonService.all("${conjObj.persistenceName?lower_case}.count", new SqlParams().set(params));
    <#else>
      return commonService.all("${refObj.persistenceName?lower_case}.count", new SqlParams().set(params));
    </#if>
    } catch (ServiceException ex) {
      throw new DomainException("count${java.nameType(refObj.name)}", ex);
    }
  }

  @Override
  public List<ObjectMap> sum${java.nameType(refObj.plural)}(ObjectMap params) throws DomainException {
    List<String> grouping${java.nameType(refObj.name)}Attributes = (List<String>) params.get("grouping${java.nameType(refObj.name)}Attributes");
    List<String> summing${java.nameType(refObj.name)}Attributes = (List<String>) params.get("summing${java.nameType(refObj.name)}Attributes");
    for (String groupingAttributeName : grouping${java.nameType(refObj.name)}Attributes) {
      ObjectMap groupingField = new ObjectMap();
      groupingField.set("persistenceName", ${java.nameType(refObj.name)}.getPersistenceName(groupingAttributeName));
      groupingField.set("attributeName", groupingAttributeName);
      params.add("groupingFields", groupingField);
    }

    for (String summingAttributeName : summing${java.nameType(refObj.name)}Attributes) {
      ObjectMap summingField = new ObjectMap();
      summingField.set("persistenceName", ${java.nameType(refObj.name)}.getPersistenceName(summingAttributeName));
      summingField.set("attributeName", summingAttributeName);
      params.add("summingFields", summingField);
    }
    
    try {
    <#if conjObjName != ''>
      return commonService.all("${conjObj.persistenceName?lower_case}.sum", new SqlParams().set(params));
    <#else>
      return commonService.all("${refObj.persistenceName?lower_case}.sum", new SqlParams().set(params));
    </#if>
    } catch (ServiceException ex) {
      throw new DomainException("sum${java.nameType(refObj.name)}", ex);
    }
  }

  </#list>
<#--#################################################################################################################-->
<#-- 创建【REMOVE】操作：逻辑删除                                                                                        -->
<#--#################################################################################################################-->
<#--#################################################################################################################-->
<#-- 衍生【一对一】操作                                                                                                 -->
<#--#################################################################################################################-->
<#list o2oRefAttrs as o2oRefAttr>
  <#if !o2oRefAttr.persistenceName??><#continue></#if>
  <#assign o2oRefObj = o2oRefObjs[o2oRefAttr?index]>
  <#assign o2oRefObjIdAttrs = modelbase.get_id_attributes(o2oRefObj)>
  <#assign o2oRefObjTargetAttr = o2oRefAttr.directRelationship.targetAttribute>

  /**
   * 通过【${modelbase.get_attribute_label(o2oRefAttr)}】属性查询【${label!''}】实体对象.
   *
   * @param ${java.nameVariable(o2oRefObj.name)}
   *        【${modelbase.get_attribute_label(o2oRefAttr)}】属性实体对象
   *
   * @return 满足条件的【${label!''}】实体对象集合
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  @Override
  public List<${typename}> find${java.nameType(entity.plural)}By${java.nameType(o2oRefAttr.name)}(${java.nameType(o2oRefObj.name)} ${java.nameVariable(o2oRefObj.name)}) throws DomainException {
    ${modelbase.type_attribute(o2oRefObjIdAttrs[0])} ${java.nameVariable(o2oRefObjIdAttrs[0].name)} = ${java.nameVariable(o2oRefObj.name)}.get${java.nameType(o2oRefObjIdAttrs[0].name)}();
    <#if o2oRefObjIdAttrs[0].type.custom>
      <#assign attrGetter = o2oRefObjIdAttrs[0].directRelationship.targetAttribute>
      <#assign getterStatement = 'get' + java.nameType(attrGetter.name) + '()'>
      <#list 1..10 as i>
        <#if attrGetter.type.primitive || !attrGetter.directRelationship??><#break></#if>
        <#assign attrGetter = attrGetter.directRelationship.targetAttribute>
        <#assign attrGetter = modelbase.get_id_attributes(attrGetter.parent)[0]>
        <#assign getterStatement = getterStatement + '.get' + java.nameType(attrGetter.name) + '()'>
      </#list>
      <#--get${java.nameType(o2oRefAttr.directRelationship.targetAttribute.name)}()-->
    return find${java.nameType(plural)}By${java.nameType(o2oRefAttr.name)}(${java.nameVariable(o2oRefObjIdAttrs[0].name)}.${getterStatement});
    <#else>
    return find${java.nameType(plural)}By${java.nameType(o2oRefAttr.name)}(${java.nameVariable(o2oRefObjIdAttrs[0].name)});
    </#if>
  }

  /**
   * 通过【${modelbase.get_attribute_label(o2oRefAttr)}】属性查询【${label!''}】实体对象.
   *
   * @param ${java.nameVariable(o2oRefObjTargetAttr.persistenceName)}
   *        ${modelbase.get_attribute_label(o2oRefObjTargetAttr)}
   *
   * @return 满足条件的【${label!''}】实体对象集合
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   *
   * @see #find${java.nameType(entity.plural)}By${java.nameType(o2oRefAttr.name)}(${java.nameType(o2oRefObj.name)})
   */
  @Override
  public List<${typename}> find${java.nameType(plural)}By${java.nameType(o2oRefAttr.name)}(${modelbase.get_attribute_primitive_type_name(o2oRefObjTargetAttr)} ${modelbase.get_attribute_sql_name(o2oRefAttr)}) throws DomainException {
    List<${typename}> retVal = new ArrayList<>();
    SqlParams sqlParams = new SqlParams();
    try {
      if (${modelbase.get_attribute_sql_name(o2oRefAttr)} == null) {
        sqlParams.set("${modelbase.get_attribute_sql_name(o2oRefAttr)}", "NULL");
      } else {
        sqlParams.set("${modelbase.get_attribute_sql_name(o2oRefAttr)}", ${modelbase.get_attribute_sql_name(o2oRefAttr)});
      }
      List<ObjectMap> ${java.nameVariable(plural)} = commonService.all("${entity.persistenceName}.find", sqlParams);
      for (ObjectMap row : ${java.nameVariable(plural)}) {
        retVal.add(${typename}Assembler.assemble${typename}(row));
      }
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
    return retVal;
  }
</#list>
<#--#################################################################################################################-->
<#-- 衍生【一对多】操作                                                                                                 -->
<#--#################################################################################################################-->
<#list o2mRefAttrs as o2mRefAttr>
  <#assign o2mRefObj = o2mRefObjs[o2mRefAttr?index]>
  <#assign o2mConjObj = o2mConjObjs[o2mRefAttr?index]>
  <#assign o2mRefObjIdAttrs = modelbase.get_id_attributes(o2mRefObj)>
  <#if o2mConjObj == '' && o2mRefObj.isLabelled('entity')><#-- 如果不存在中间关联表，并且关联的是实体对象，则忽略 --><#continue></#if>
  <#-- o2mRefObj对象的单数名称 -->
  <#assign o2mRefObjSingular = modelbase.get_object_singular(o2mRefObj)>
  <#if o2mRefObj.type.name == entity.type.name>
    <#assign o2mRefObjSingular = 'child'>
  <#else>
    <#assign o2mRefObjSingular = modelbase.get_attribute_singular(o2mRefAttr)>
  </#if>
  <#if o2mRefObj.isLabelled('value')>
    <#-- 如果是值域对象，则通过实体对象读取 -->

  /**
   * 读取一个【${modelbase.get_attribute_label(o2mRefAttr)}】值对象。
    <#list o2mRefObjIdAttrs as o2mRefObjIdAttr>
   *
   * @param ${java.nameVariable(o2mRefObjIdAttr.name)}
   *        【${modelbase.get_attribute_label(o2mRefObjIdAttr)}】属性
    </#list>
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  @Override
  public ${java.nameType(o2mRefObj.name)} read${java.nameType(modelbase.get_attribute_singular(o2mRefAttr))}(<@appbase.print_attributes_as_primitive_parameters attrs=o2mRefObjIdAttrs/>) throws DomainException {
    SqlParams sqlParams = new SqlParams();
    try {
    <#list o2mRefObjIdAttrs as o2mRefObjIdAttr>
    sqlParams.set("${modelbase.get_attribute_sql_name(o2mRefObjIdAttr)}", ${java.nameVariable(o2mRefObjIdAttr.name)});
    </#list>
    ObjectMap found = commonService.single("${o2mRefObj.persistenceName}.find", sqlParams);
    if (found == null) {
      return null;
    }
    return ${java.nameType(o2mRefObj.name)}Assembler.assemble${java.nameType(o2mRefObj.name)}(found);
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
  }
  </#if>

  /**
   * 添加多个【${modelbase.get_object_label(o2mRefObj)}】一对多对象到【${label}】实体对象.
   *
   * @param ${varname}
   *        持有【${modelbase.get_object_label(o2mRefObj)}】一对多对象的【${label}】实体对象
   *
   * @param ${java.nameVariable(o2mRefAttr.name)}
   *        【${modelbase.get_object_label(o2mRefObj)}】一对多对象
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  @Override
  public void add${java.nameType(o2mRefAttr.name)}(${typename} ${varname}, List<${java.nameType(o2mRefObj.name)}> ${java.nameVariable(o2mRefAttr.name)}) throws DomainException {
    try {
      for (${java.nameType(o2mRefObj.name)} ${java.nameVariable(o2mRefObjSingular)} : ${java.nameVariable(o2mRefAttr.name)}) {
    <#if o2mConjObj == ''>
      <#-- 如果是一对多关联 -->
      <#if o2mRefObj.isLabelled('entity')>
        ${java.nameVariable(o2mRefObj.name)}Repository.create${java.nameType(o2mRefObj.name)}(${java.nameVariable(o2mRefObjSingular)});
      <#elseif o2mRefObj.isLabelled('value')>
        add${java.nameType(modelbase.get_attribute_singular(o2mRefAttr))}(${varname}, ${java.nameVariable(o2mRefObjSingular)});
      </#if>
    <#else>
      <#-- 如果是多对多关联 -->
        SqlParams sqlParams = new SqlParams();
      <#list o2mConjObj.attributes as o2mConjObjAttr>
        <#if o2mConjObjAttr.type.name == entity.name>
        sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjAttr)}", ${varname}.get${java.nameType(idAttrs[0].name)}());
        <#elseif o2mConjObjAttr.type.name == o2mRefObj.name>
          <#assign o2mRefObjIdAttrs = modelbase.get_id_attributes(o2mRefObj)>
        sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjAttr)}", ${java.nameVariable(o2mRefObjSingular)}.get${java.nameType(o2mRefObjIdAttrs[0].name)}());  
        <#elseif o2mConjObjAttr.type.name == 'now' || o2mConjObjAttr.type.name == 'datetime'>
        sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjAttr)}", new Timestamp(System.currentTimeMillis()));
        <#else>
        sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjAttr)}", null);
        </#if>
      </#list>
        commonService.execute("${o2mConjObj.persistenceName}.create", sqlParams);
    </#if>
      }
    } catch (Exception ex) {
      throw new DomainException(ex);
    }
  }
  <#if o2mConjObj == '' || o2mRefObj.isLabelled('value')>
    <#-- 如果不是多对多关联，或者是多对多关联，且关联的是值对象，才会存在【添加单个值对象】的方法。 -->

  /**
   * 添加一个【${modelbase.get_attribute_label(o2mRefAttr)}】实体或值对象到【${label!''}】实体对象.
   *
   * @param ${varname}
   *        持有【${modelbase.get_attribute_label(o2mRefAttr)}】对象的【${label}】实体对象
   *
   * @param ${java.nameVariable(o2mRefObj.singular)}
   *        【${modelbase.get_attribute_label(o2mRefAttr)}】对象
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  @Override
  public void add${java.nameType(modelbase.get_attribute_singular(o2mRefAttr))}(${typename} ${varname}, ${java.nameType(o2mRefObj.name)} ${java.nameVariable(modelbase.get_attribute_singular(o2mRefAttr))}) throws DomainException {
    try {
    <#if o2mConjObj == ''>
      <#-- 一对多关联 -->
      <#list o2mRefObj.attributes as o2mRefObjAttr>
        <#if o2mRefObjAttr.type.name == entity.name>
      ${java.nameVariable(modelbase.get_attribute_singular(o2mRefAttr))}.set${java.nameType(o2mRefObjAttr.name)}(${varname});
      SqlParams sqlParams = ${java.nameType(o2mRefObj.name)}Assembler.assembleSqlParams(${java.nameVariable(modelbase.get_attribute_singular(o2mRefAttr))});
      commonService.execute("${o2mRefObj.persistenceName}.create", sqlParams);
        </#if>
      </#list>
    <#else>
      <#-- 多对多关联 -->
      <#list o2mRefObjIdAttrs as o2mRefObjIdAttr>
      ${modelbase.type_attribute(o2mRefObjIdAttr)} ${java.nameVariable(o2mRefObjIdAttr.name)} = ${java.nameVariable(modelbase.get_attribute_singular(o2mRefAttr))}.get${java.nameType(o2mRefObjIdAttr.name)}();
      </#list>
      ${java.nameType(o2mRefObj.name)} existing = read${java.nameType(modelbase.get_attribute_singular(o2mRefAttr))}(<@appbase.print_attributes_as_primitive_arguments attrs=o2mRefObjIdAttrs/>);
      // 存在多对多的关联，所以有则更新，没有则添加
      SqlParams sqlParams = new SqlParams();
      <#list o2mConjObj.attributes as o2mConjObjAttr>
        <#if o2mConjObjAttr.type.name == entity.name>
      sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjAttr)}", ${varname}.get${java.nameType(idAttrs[0].name)}());
        <#elseif o2mConjObjAttr.type.name == o2mRefObj.name>
          <#assign o2mRefObjIdAttrs = modelbase.get_id_attributes(o2mRefObj)>
      sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjAttr)}", ${java.nameVariable(o2mRefObjSingular)}.get${java.nameType(o2mRefObjIdAttrs[0].name)}());  
        <#elseif o2mConjObjAttr.type.name == 'now' || o2mConjObjAttr.type.name == 'datetime'>
      sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjAttr)}", new Timestamp(System.currentTimeMillis()));
        <#else>
      sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjAttr)}", null);
        </#if>
      </#list>
      if (existing == null) {
        commonService.execute("${o2mConjObj.persistenceName}.create", sqlParams);
      } else {
        commonService.execute("${o2mConjObj.persistenceName}.update", sqlParams);
      }
    </#if>
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
  }

  /**
   * 更新一个【${modelbase.get_attribute_label(o2mRefAttr)}】实体或值对象到【${label!''}】实体对象.
   *
   * @param ${varname}
   *        持有【${modelbase.get_attribute_label(o2mRefAttr)}】对象的【${label}】实体对象
   *
   * @param ${java.nameVariable(o2mRefObj.singular)}
   *        【${modelbase.get_attribute_label(o2mRefAttr)}】对象
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  @Override
  public void update${java.nameType(modelbase.get_attribute_singular(o2mRefAttr))}(${typename} ${varname}, ${java.nameType(o2mRefObj.name)} ${java.nameVariable(modelbase.get_attribute_singular(o2mRefAttr))}) throws DomainException {
    try {
    <#if o2mConjObj == ''>
      <#-- 一对多关联 -->
      <#list o2mRefObj.attributes as o2mRefObjAttr>
        <#if o2mRefObjAttr.type.name == entity.name>
      ${java.nameVariable(modelbase.get_attribute_singular(o2mRefAttr))}.set${java.nameType(o2mRefObjAttr.name)}(${varname});
      SqlParams sqlParams = ${java.nameType(o2mRefObj.name)}Assembler.assembleSqlParams(${java.nameVariable(modelbase.get_attribute_singular(o2mRefAttr))});
      commonService.execute("${o2mRefObj.persistenceName}.update", sqlParams);
        </#if>
      </#list>
    <#else>
      <#-- 多对多关联 -->
      <#list o2mRefObjIdAttrs as o2mRefObjIdAttr>
      ${modelbase.type_attribute(o2mRefObjIdAttr)} ${java.nameVariable(o2mRefObjIdAttr.name)} = ${java.nameVariable(modelbase.get_attribute_singular(o2mRefAttr))}.get${java.nameType(o2mRefObjIdAttr.name)}();
      </#list>
      ${java.nameType(o2mRefObj.name)} existing = read${java.nameType(modelbase.get_attribute_singular(o2mRefAttr))}(<@appbase.print_attributes_as_primitive_arguments attrs=o2mRefObjIdAttrs/>);
      // 存在多对多的关联，所以有则更新，没有则添加
      SqlParams sqlParams = new SqlParams();
      <#list o2mConjObj.attributes as o2mConjObjAttr>
        <#if o2mConjObjAttr.type.name == entity.name>
      sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjAttr)}", ${varname}.get${java.nameType(idAttrs[0].name)}());
        <#elseif o2mConjObjAttr.type.name == o2mRefObj.name>
          <#assign o2mRefObjIdAttrs = modelbase.get_id_attributes(o2mRefObj)>
      sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjAttr)}", ${java.nameVariable(o2mRefObjSingular)}.get${java.nameType(o2mRefObjIdAttrs[0].name)}());  
        <#elseif o2mConjObjAttr.type.name == 'now' || o2mConjObjAttr.type.name == 'datetime'>
      sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjAttr)}", new Timestamp(System.currentTimeMillis()));
        <#else>
      sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjAttr)}", null);
        </#if>
      </#list>
      if (existing == null) {
        commonService.execute("${o2mConjObj.persistenceName}.create", sqlParams);
      } else {
        commonService.execute("${o2mConjObj.persistenceName}.update", sqlParams);
      }
    </#if>
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
  }
  </#if>

  /**
   * 查询【${label}】实体对象的所有【${modelbase.get_object_label(o2mRefObj)}】一对多对象.
   *
   * @param ${varname}
   *        持有【${modelbase.get_object_label(o2mRefObj)}】一对多对象的【${label}】实体对象
   *
   * @return 对应的【${modelbase.get_object_label(o2mRefObj)}】一对多对象
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  // @Override
  public List<${java.nameType(o2mRefObj.name)}> find${java.nameType(o2mRefAttr.name)}By${java.nameType(entity.name)}(${typename} ${varname}) throws DomainException {
    List<${java.nameType(o2mRefObj.name)}> retVal = new ArrayList<>();
    try {
  <#if o2mConjObj == ''>
    <#-- TODO -->
    SqlParams sqlParams = new SqlParams();
    sqlParams.set("${modelbase.get_attribute_sql_name(idAttrs[0])}", ${varname}.get${java.nameType(idAttrs[0].name)}());
    List<ObjectMap> rels = commonService.all("${o2mRefObj.persistenceName}.find", sqlParams);
    if (rels.isEmpty()) {
      return retVal;
    }
    for (ObjectMap rel : rels) {
      ${java.nameType(o2mRefObj.name)} ${java.nameVariable(modelbase.get_attribute_singular(o2mRefAttr))} = ${java.nameType(o2mRefObj.name)}Assembler.assemble${java.nameType(o2mRefObj.name)}(rel);
    <#list o2mRefObj.attributes as o2mRefObjAttr>
      <#if o2mRefObjAttr.type.custom && !o2mRefObjAttr.constraint.identifiable>
      ${java.nameVariable(modelbase.get_attribute_singular(o2mRefAttr))}.set${java.nameType(o2mRefObjAttr.name)}(${java.nameType(o2mRefObjAttr.type.name)}Assembler.assemble${java.nameType(o2mRefObjAttr.type.name)}(rel));
      <#elseif o2mRefObjAttr.type.name == entity.name>
      ${java.nameVariable(modelbase.get_attribute_singular(o2mRefAttr))}.set${java.nameType(o2mRefObjAttr.name)}(${varname});
      <#elseif o2mRefObjAttr.type.custom && o2mRefObjAttr.type.name != entity.name>
      ${java.nameVariable(modelbase.get_attribute_singular(o2mRefAttr))}.set${java.nameType(o2mRefObjAttr.name)}(${java.nameVariable(o2mRefObjAttr.type.name)}Repository.read${java.nameType(o2mRefObjAttr.type.name)}(rel.get("${modelbase.get_attribute_sql_name(o2mRefObjAttr)}")));
      </#if>
    </#list>  
      retVal.add(${java.nameVariable(modelbase.get_attribute_singular(o2mRefAttr))});
    }
  <#else>
    <#-- 多对多关联 -->
    <#list o2mConjObj.attributes as o2mConjObjAttr>
      <#if o2mConjObjAttr.type.custom && o2mConjObjAttr.type.name == o2mRefAttr.type.componentType.name>
        <#assign o2mConjObjAttrFound = o2mConjObjAttr>
        <#break>
      </#if>
    </#list>
      // 从关联关系表中查询所有关联标识实体值
      SqlParams sqlParams = new SqlParams();
      sqlParams.set("${modelbase.get_attribute_sql_name(idAttrs[0])}", ${varname}.get${java.nameType(idAttrs[0].name)}());
      List<ObjectMap> rels = commonService.all("${o2mConjObj.persistenceName}.find", sqlParams);
      if (rels.isEmpty()) {
        return retVal;
      }
      ObjectMap params = new ObjectMap();
      for (ObjectMap rel : rels) {
        params.add("${modelbase.get_attribute_sql_name(o2mConjObjAttrFound)}s", rel.get("${modelbase.get_attribute_sql_name(o2mConjObjAttrFound)}"));
      }
      retVal.addAll(${java.nameVariable(o2mRefObj.name)}Repository.find${java.nameType(modelbase.get_object_plural(o2mRefObj))}By(params));
  </#if>
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
    return retVal;
  }

  /**
   * 删除【${label}】实体对象的所有【${modelbase.get_object_label(o2mRefObj)}】一对多对象.
   *
   * @param ${varname}
   *        持有【${modelbase.get_object_label(o2mRefObj)}】一对多对象的【${label}】实体对象
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  @Override
  public void remove${java.nameType(o2mRefAttr.name)}(${typename} ${varname}) throws DomainException {
    SqlParams sqlParams = new SqlParams();
    try {
  <#if o2mConjObj == ''>
    <#assign o2mRefObjRefAttr = modelbase.get_o2o_attribute(o2mRefObj, entity.name)!>
      sqlParams.set("${modelbase.get_attribute_sql_name(o2mRefObjRefAttr)}", ${varname}.get${java.nameType(o2mRefObjRefAttr.directRelationship.targetAttribute.name)}());
      commonService.execute("${o2mRefObj.persistenceName}.delete", sqlParams);
  <#else>
    <#assign o2mConjObjRefAttr = modelbase.get_o2o_attribute(o2mConjObj, entity.name)!>
      sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjRefAttr)}", ${varname}.get${java.nameType(o2mConjObjRefAttr.directRelationship.targetAttribute.name)}());
      commonService.execute("${o2mConjObj.persistenceName}.delete", sqlParams);
  </#if>
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
  }
  <#if o2mConjObj == ''>
    <#-- 如果不是多对多关联，才会存在【添加单个值对象】的方法。 -->

  @Override
  public void remove${java.nameType(modelbase.get_attribute_singular(o2mRefAttr))}(${typename} ${varname}, ${java.nameType(o2mRefObj.name)} ${java.nameType(modelbase.get_attribute_singular(o2mRefAttr))}) throws DomainException {
    try {
    <#list o2mRefObj.attributes as o2mRefObjAttr>
      <#if o2mRefObjAttr.type.name == entity.name>
      ${java.nameType(modelbase.get_attribute_singular(o2mRefAttr))}.set${java.nameType(o2mRefObjAttr.name)}(${varname});
      </#if>
    </#list>
      SqlParams sqlParams = ${java.nameType(o2mRefObj.name)}Assembler.assembleSqlParams(${java.nameType(modelbase.get_attribute_singular(o2mRefAttr))});
    <#if o2mConjObj != ''>
      sqlParams.set("${modelbase.get_attribute_sql_name(o2mConjObjRefAttr)}", ${varname}.get${java.nameType(o2mConjObjRefAttr.directRelationship.targetAttribute.name)}());
      commonService.execute("${o2mConjObj.persistenceName}.delete", sqlParams);
    <#else>
      commonService.execute("${o2mRefObj.persistenceName}.delete", sqlParams);
    </#if>
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
  }
  </#if>

  /**
   * 通过【${modelbase.get_object_label(o2mRefObj)}】一对多对象查询【${label}】实体对象.
   *
   * @param ${java.nameVariable(o2mRefAttr.name)}
   *        【${modelbase.get_object_label(o2mRefObj)}】实体对象
   *
   * @return 满足条件的【${label}】实体对象集合
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  @Override
  public List<${typename}> find${java.nameType(plural)}By${java.nameType(o2mRefAttr.name)}(List<${java.nameType(o2mRefObj.name)}> ${java.nameVariable(o2mRefAttr.name)}) throws DomainException {
    ObjectMap params = new ObjectMap();
    for (${java.nameType(o2mRefObj.name)} ${java.nameVariable(o2mRefObj.name)} : ${java.nameVariable(o2mRefAttr.name)}) {
      params.add("${modelbase.get_attribute_sql_name(o2mRefObjIdAttrs[0])}", ${java.nameVariable(o2mRefObj.name)}.get${java.nameType(o2mRefObjIdAttrs[0].name)}());
    }
    List<${typename}> retVal = new ArrayList<>();
    try {
      List<ObjectMap> items = commonService.all("${entity.persistenceName}.find", new SqlParams().set(params));
      for (ObjectMap item : items) {
        ${typename} ${java.nameVariable(entity.singular)} = ${typename}Assembler.assemble${typename}(item);
        retVal.add(${java.nameVariable(entity.singular)});
      }
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
    return retVal;
  }
  <#if o2mRefObj.isLabelled('value')>

  /**
   * 通过【${modelbase.get_object_label(o2mRefObj)}】一对多对象查询【${label}】实体对象.
   *
   * @param ${java.nameVariable(o2mRefAttr.name)}
   *        【${modelbase.get_object_label(o2mRefObj)}】实体对象
   *
   * @return 满足条件的【${label}】实体对象集合
   *
   * @throws DomainException
   *        捕获到任何异常则抛出
   */
  public List<${java.nameType(o2mRefObj.name)}> find${java.nameType(o2mRefAttr.name)}(${typename} ${varname}) throws DomainException {
    List<${java.nameType(o2mRefObj.name)}> retVal = new ArrayList<>();
    ObjectMap params = new ObjectMap();
    params.set("${modelbase.get_attribute_sql_name(idAttrs[0])}", ${varname}.get${java.nameType(idAttrs[0].name)}());
    
    try {
      List<ObjectMap> items = commonService.all("${o2mRefObj.persistenceName}.find", new SqlParams().set(params));
      for (ObjectMap item : items) {
        ${java.nameType(o2mRefObj.name)} ${java.nameVariable(o2mRefObj.name)} = ${java.nameType(o2mRefObj.name)}Assembler.assemble${java.nameType(o2mRefObj.name)}(item);
        retVal.add(${java.nameVariable(o2mRefObj.name)});
      }
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
    return retVal;
  }
  </#if>
</#list>
<#-- 对象中的【隐式引用】 -->
<#assign implicitReferences = modelbase.get_object_implicit_references(entity)>
<#list implicitReferences as implicitReferenceName, implicitReference>
  <#if implicitReference['id']??>

  /**
   * 根据隐式引用（${implicitReferenceName}）属性查询指向的对象.
   */
  @Override
  public <T> T read${java.nameType(implicitReferenceName)}ById(${modelbase.get_object_implicit_reference_as_argument(implicitReference)}) throws DomainException {
    <#list implicitReference as value, attr>
      <#if value == 'id'>
    String id = ${modelbase.get_attribute_sql_name(attr)};
      <#elseif value == 'type'>
    String type = ${modelbase.get_attribute_sql_name(attr)};
      </#if>
    </#list>
    try {
      return repositoryService.readObject(id, type);
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
  }

  /**
   * 根据隐式引用（${implicitReferenceName}）属性查询指向的对象.
   */
  @Override
  public <T> List<T> find${java.nameType(implicitReferenceName)}sByIds(List<String> ids, String type, String plural) throws DomainException {
    try {
      return repositoryService.findObjectsByIds(ids, type, plural);
    } catch (ServiceException ex) {
      throw new DomainException(ex);
    }
  }
  </#if>
</#list>

  /**
   * 设置实体对象的标识属性值，支持UUID、最大数加1、业务编码或者外键作为主键、多主键等方法。
   *
   * @param ${varname}
   *        实体对象
   *
   * @throw DomainException
   *        捕获到任何异常则抛出
   */
  @Override
  public void setIdentifiableAttributes(${typename} ${varname}) throws DomainException {
<#list idAttrs as idAttr>
    if (${varname}.get${java.nameType(idAttr.name)}() == null) {
  <#if idAttr.type.name == 'uuid'>
      ${varname}.set${java.nameType(idAttr.name)}(IdGenerator.uuid());
  <#elseif idAttr.type.name == 'integer' || idAttr.type.name == 'int' || idAttr.type.name == 'long' || idAttr.type.name == 'number'>
      try {
        ${varname}.set${java.nameType(idAttr.name)}(IdGenerator.sequence(commonService, "${entity.persistenceName?lower_case}.${idAttr.persistenceName?lower_case}.max", "${idAttr.persistenceName?lower_case}"));
      } catch (ServiceException ex) {
        throw new DomainException(ex);
      }
  <#elseif idAttr.type.name?index_of('code') == 0>
    <#assign domainType = idAttr.constraint.domainType?string>
    <#assign numberCount = 0>
    <#if domainType?index_of('N') != -1>
      <#assign numberCount = domainType?substring(domainType?index_of('N'))?length - 1>
    </#if>
    <#if numberCount != 0>
      <#assign codeFormat = domainType?replace('code', '')?replace('(', '')?replace(')', '')?replace('~', '')?replace('N', '')>
    <#else>
      <#assign numberCount = domainType?replace('code(', '')?replace(')', '')>
    </#if>
      try {
        ${varname}.set${java.nameType(idAttr.name)}(IdGenerator.code("${codeFormat!''}", ${numberCount}, commonService, "${entity.persistenceName?lower_case}.${idAttr.persistenceName?lower_case}.max", "${idAttr.persistenceName?lower_case}"));
      } catch (ServiceException ex) {
        throw new DomainException(ex);
      }
  <#elseif idAttr.constraint.domainType.name == 'now'>
      ${varname}.set${java.nameType(idAttr.name)}(new Timestamp(System.currentTimeMillis()));
  <#elseif idAttr.type.custom>
      <#assign refObj = model.findObjectByName(idAttr.type.name)>
      ${java.nameType(refObj.name)} ${java.nameVariable(refObj.name)} = new ${java.nameType(refObj.name)}();
      ${java.nameVariable(refObj.name)}Repository.setIdentifiableAttributes(${java.nameVariable(refObj.name)});
      ${varname}.set${java.nameType(idAttr.name)}(${java.nameVariable(refObj.name)});
  <#else>
      // TODO: IMPLEMENT YOUR OWN ID GENERATION
      ${varname}.set${java.nameType(idAttr.name)}(IdGenerator.uuid());
  </#if>
    }
</#list>
  }
}
