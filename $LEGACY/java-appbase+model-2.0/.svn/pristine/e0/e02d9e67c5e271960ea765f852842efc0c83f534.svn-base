<#import '/$/appbase.ftl' as appbase>
<#import '/$/modelbase.ftl' as modelbase>
<#if license??>
${java.license(license)}
</#if>
package <#if namespace??>${namespace}.</#if>${app.name}.model.assembler;

import java.util.List;
import java.util.ArrayList;
import java.math.BigDecimal;
import java.io.Serializable;
import java.sql.Date;
import java.sql.Timestamp;

import com.alibaba.fastjson.*;

import net.doublegsoft.appbase.ddd.DomainException;
import net.doublegsoft.appbase.ObjectMap;
import net.doublegsoft.appbase.SqlParams;
import net.doublegsoft.appbase.service.CommonService;
import net.doublegsoft.appbase.service.ServiceException;
import net.doublegsoft.appbase.util.Safe;

import <#if namespace??>${namespace}.</#if>${app.name}.model.*;
<#if modelbase.has_entity_object(app.name, model)>
import <#if namespace??>${namespace}.</#if>${app.name}.model.entity.*;
</#if>
<#if modelbase.has_value_object(app.name, model)>
import <#if namespace??>${namespace}.</#if>${app.name}.model.value.*;
</#if>
<#-- 实体类名 -->
<#assign typename = java.nameType(entity.name)>
<#-- 实体变量名 -->
<#assign varname = java.nameVariable(entity.name)>
<#assign label = modelbase.get_object_label(entity)>
<#-- 名称的单数和复数形式 -->
<#assign singular = modelbase.get_attribute_labelled_option(entity, 'name', 'singular')>
<#assign plural   = modelbase.get_attribute_labelled_option(entity, 'name', 'plural')>

<#-- 实体访问库集合 -->
<#-- 实体的标识属性 -->
<#assign idAttrs  = modelbase.get_id_attributes(entity)>
<#-- 所有关联对象根据业务关系的分组 -->
<#assign groups   = modelbase.group_object_references(entity, model)>

<#-- 实体访问库集合 -->
<#assign anyRefObjs = groups.anyRefObjs>
<#-- 引用一个 -->
<#assign o2oRefAttrs = groups.o2oRefAttrs>
<#assign o2oRefObjs  = groups.o2oRefObjs>
<#-- 引用多个 -->
<#assign o2mRefAttrs = groups.o2mRefAttrs>
<#assign o2mRefObjs  = groups.o2mRefObjs>
<#assign o2mConjObjs = groups.o2mConjObjs>
/**
 * 【${modelbase.get_object_label(entity)}】实体各层对象的装配器。
 *
 * @author <a href="mailto:guo.guo.gan@gmail.com">Christian Gann</a>
 *
 * @since ${version}
 */
public final class ${typename}Assembler implements Constants {

<#--#################################################################################################################-->
<#-- 创建【CREATE】操作                                                                                                -->
<#--#################################################################################################################-->
  /**
   * 从数据库存储的数据对象中装配【${modelbase.get_object_label(entity)}】实体对象。
   *
   * @param params
   *        普通数据对象
   *
   * @return 装配后的【${modelbase.get_object_label(entity)}】实体对象
   */
  public static ${typename} assemble${typename}(ObjectMap params) {
    ${typename} retVal = new ${typename}();
<#list entity.attributes as attr>
  <#if !attr.persistenceName?? || attr.type.custom><#continue></#if>
  <#if attr.type.name == 'bool'>
    retVal.set${java.nameType(attr.name)}(TRUE.equals(params.get("${modelbase.get_attribute_sql_name(attr)}")));
  <#else>
    retVal.set${java.nameType(attr.name)}(params.get("${modelbase.get_attribute_sql_name(attr)}"));
  </#if>
</#list>
<#list o2oRefAttrs as o2oRefAttr>
  <#assign o2oRefObj = o2oRefObjs[o2oRefAttr?index]>
  <#assign o2oRefObjIdAttrs = modelbase.get_id_attributes(o2oRefObj)>
    if (params.containsKey("${modelbase.get_attribute_sql_name(o2oRefAttr)}")) {
      // 扩展对象可以从参数中直接获得关联标识
      ${java.nameType(o2oRefObj.name)} ${java.nameVariable(o2oRefObj.name)} = new ${java.nameType(o2oRefObj.name)}();
      ${java.nameVariable(o2oRefObj.name)}.set${java.nameType(o2oRefObjIdAttrs[0].name)}(params.get("${modelbase.get_attribute_sql_name(o2oRefAttr)}"));
      retVal.set${java.nameType(o2oRefAttr.name)}(${java.nameVariable(o2oRefObj.name)});
    }
</#list>
    return retVal;
  }

  /**
   * 从网页应用的数据对象中装配【${modelbase.get_object_label(entity)}】实体对象。
   *
   * @param params
   *        普通数据对象
   *
   * @return 装配后的【${modelbase.get_object_label(entity)}】实体对象
   */
  public static ${typename} assemble${typename}FromFrontend(ObjectMap params) {
    ${typename} retVal = new ${typename}();
<#list entity.attributes as attr>
  <#if attr.type.primitive>
    <#-- 基本类型 -->
    <#if attr.type.name == 'bool'>
    retVal.set${java.nameType(attr.name)}(TRUE.equals(params.get("${modelbase.get_attribute_sql_name(attr)}")));
    <#else>
    retVal.set${java.nameType(attr.name)}(Safe.safe(params.get("${modelbase.get_attribute_sql_name(attr)}"), ${modelbase.type_attribute(attr)}.class));
    </#if>
  <#elseif attr.type.collection>
    <#if attr.type.componentType.custom>

    List<ObjectMap> ${java.nameVariable(attr.name)}Array = params.get("${java.nameVariable(attr.name)}");
    if (${java.nameVariable(attr.name)}Array != null) {
      for (int i = 0; i < ${java.nameVariable(attr.name)}Array.size(); i++) {
        ObjectMap item = ${java.nameVariable(attr.name)}Array.get(i);
        ${java.nameType(attr.type.componentType.name)} ${java.nameVariable(attr.type.componentType.name)} = ${java.nameType(attr.type.componentType.name)}Assembler.assemble${java.nameType(attr.type.componentType.name)}FromFrontend(item);
        retVal.get${java.nameType(attr.name)}().add(${java.nameVariable(attr.type.componentType.name)});
      }
    }
    </#if>
  <#elseif attr.type.custom>

    ObjectMap ${java.nameVariable(attr.name)}Object = params.get("${java.nameVariable(attr.name)}");
    if (${java.nameVariable(attr.name)}Object != null) {
      ${java.nameType(attr.type.name)} ${java.nameVariable(attr.type.name)} = ${java.nameType(attr.type.name)}Assembler.assemble${java.nameType(attr.type.name)}FromFrontend(${java.nameVariable(attr.name)}Object);
      retVal.set${java.nameType(attr.name)}(${java.nameVariable(attr.type.name)});
    }
  <#else>
    <#-- could be domain type -->
    retVal.set${java.nameType(attr.name)}(Safe.safe(params.get("${modelbase.get_attribute_sql_name(attr)}"), ${modelbase.type_attribute(attr)}.class));
  </#if>
</#list>
    return retVal;
  }

  /**
   * 从网页应用的数据对象中装配【${modelbase.get_object_label(entity)}】实体对象。
   *
   * @param params
   *        普通数据对象
   *
   * @return 装配后的【${modelbase.get_object_label(entity)}】实体对象
   */
  public static void assemble${typename}From${typename}(${typename} source, ${typename} target) {
<#list entity.attributes as attr>
  <#if attr.type.collection>
    if (source.get${java.nameType(attr.name)}().size() > 0) {
      target.get${java.nameType(attr.name)}().clear();
      target.get${java.nameType(attr.name)}().addAll(source.get${java.nameType(attr.name)}());
    }
  <#else>
    if (source.get${java.nameType(attr.name)}() != null) {
      target.set${java.nameType(attr.name)}(source.get${java.nameType(attr.name)}());
    }
  </#if>
</#list>
  }

  /**
   * 从【${modelbase.get_object_label(entity)}】实体对象中装配SQL参数对象。
   *
   * @param ${varname}
   *        【${modelbase.get_object_label(entity)}】实体对象
   *
   * @return 装配后的SQL参数对象
   */
  public static SqlParams assembleSqlParams(${typename} ${varname}) {
    SqlParams retVal = new SqlParams();
<@appbase.print_assemble_sqlparams obj=entity indent=4/>
    return retVal;
  }

<#assign valObjs = {}>
<#list o2oRefAttrs as o2oRefAttr>
  <#assign o2oRefObj = o2oRefAttrs[o2oRefAttr?index]>
  <#if o2oRefObj.isLabelled('value')>
    <#assign valObjs = valObjs + {o2oRefObj.name : o2oRefObj}>
  </#if>
</#list>
<#list o2mRefAttrs as o2mRefAttr>
  <#assign o2mRefObj = o2mRefObjs[o2mRefAttr?index]>
  <#if o2mRefObj.isLabelled('value')>
    <#assign valObjs = valObjs + {o2mRefObj.name : o2mRefObj}>
  </#if>
</#list>
<#list valObjs?values as valObj>
  public static ${java.nameType(valObj.singular)} assemble${java.nameType(valObj.singular)}(ObjectMap params) {
    ${java.nameType(valObj.singular)} retVal = new ${java.nameType(valObj.singular)} ();
  <#list valObj.attributes as valObjAttr>
    <#if valObjAttr.type.primitive>
    retVal.set${java.nameType(valObjAttr.name)}(params.get("${modelbase.get_attribute_sql_name(valObjAttr)}"));
    </#if>
  </#list>
    return retVal;
  }

  public static SqlParams assembleSqlParams(${java.nameType(valObj.singular)} ${java.nameVariable(valObj.singular)}) {
    SqlParams retVal = new SqlParams();
  <#list valObj.attributes as valObjAttr>
    <#if valObjAttr.type.primitive>
      <#if valObjAttr.type.name == 'bool'>
    retVal.set("${modelbase.get_attribute_sql_name(valObjAttr)}", (${java.nameVariable(valObj.singular)}.get${java.nameType(valObjAttr.name)}() == null || !${java.nameVariable(valObj.singular)}.get${java.nameType(valObjAttr.name)}()) ? FLASE : TRUE);
      <#else>
    retVal.set("${modelbase.get_attribute_sql_name(valObjAttr)}", ${java.nameVariable(valObj.singular)}.get${java.nameType(valObjAttr.name)}());
      </#if>
    </#if>
  </#list>
    return retVal;
  }

</#list>
  private ${typename}Assembler() {}
}
